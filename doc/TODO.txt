- write down semantics of:
	test_requires
	dev_requires
	setup_requires
	make_reuquires
	...
	in the md files of pydmt.
- make pydmt print builders which are cached and which are skipped.
- tools feature:
	every builder? can declare a tool it is using:
	say java or htmllint etc...
	Pydmt has a central tools manager and it knows all the tools.
	It can also print all the tools, their locations and their versions at the begining
	of the run and that is what we will do in CICD. This will enable us to debug
	this easier.
- measure the time of everybuilder and enable to easily turn it on.
	after that optimize the run time of pydmt.
- when I run pydmt in an empty directory I don't get any warning or anything
	just an running with no indication of anything.
	should I have a .pydmt config file?.
	more output for pydmt is requires even for things which are ok with cache.
- do it so I would see reasonable errors when I run pymdt:
	do not show stack trace by default
	show the actually errors by default.
- make pydmt be plugin based so I could Iterator all builders or features.
- add the ability to add parameters to:
	$ pydmt build [paramters]
  and control which features and builders are we running.
  this will enabled me to not run templating when doing CI/CD
	which currently breaks my code.
- add installer for gems which works like this:
	$ bundle install --local
	and works from a Gemfile and Gemfile.lock
	look at site-personal-jekyll.

- add to YAML scanning and finding of vscode type schema and
	using it.
- add json validation with Coc.
- add conversion of yaml to json.
- add pylinting to pydmt
	https://stackoverflow.com/questions/2028268/invoking-pylint-programmatically

- change version
	then build
	then build again
	somehow the second build still does something
	fix that
- add a plugin system to pydmt.
	pick up all features and builders
	This way we will not need hardcoding of default builders in pydmt/main.py build method
- implement the "clean" method
	just go over all builders, take all targets and remove them.
	The problems is what happens with targets we discover after building?
		write a doc about it.
- support yaml validations
- maybe run sphinx programaticlly instead of via the executable?
- support other template types like jinja2, mustache, string.template (standard library), ...
- cannot do something like:
	$ pydmt build | foo
	get weird errors - take care of that.
- emit logging messages when things are running for easy debugging.
